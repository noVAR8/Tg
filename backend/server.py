from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorClient
import httpx
import os
import json
from datetime import datetime
import asyncio
from typing import Optional
import uuid
from dotenv import load_dotenv
import hashlib
import random
import string

# Load environment variables
load_dotenv()

app = FastAPI()

# Enable CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Environment variables
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN', '6467050584:AAHhM8xo_VT-Ublz3A_2u3pU34k525b2lNg')
USERSBOX_TOKEN = os.environ.get('USERSBOX_TOKEN', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGVkX2F0IjoxNzUyMzE3OTcwLCJhcHBfaWQiOjE3NTIzMTc5NzB9.yQb2nFHs7B-UZ-UvxhyQty7Zuu9QjZ5yWH-s-LEgd90')
MONGO_URL = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
DB_NAME = os.environ.get('DB_NAME', 'telegram_bot_db')

# Global variables
db = None
http_client = None

@app.on_event("startup")
async def startup_db_client():
    global db, http_client
    client = AsyncIOMotorClient(MONGO_URL)
    db = client[DB_NAME]
    http_client = httpx.AsyncClient()
    print("Database and HTTP client initialized")

@app.on_event("shutdown")
async def shutdown_db_client():
    global http_client
    if http_client:
        await http_client.aclose()

# Utility Functions
def generate_referral_code(user_id: int) -> str:
    """Generate unique referral code for user"""
    # Create a hash based on user_id and some random data
    random_part = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
    code_data = f"{user_id}_{random_part}"
    hash_obj = hashlib.md5(code_data.encode())
    return hash_obj.hexdigest()[:8].upper()

def normalize_phone_number(phone: str) -> str:
    """Normalize phone number to E.164 format"""
    # Remove all non-digit characters except +
    import re
    cleaned = re.sub(r'[^\d+]', '', phone)
    
    # If starts with 8, replace with +7
    if cleaned.startswith('8'):
        cleaned = '+7' + cleaned[1:]
    # If starts with 7 without +, add +
    elif cleaned.startswith('7') and not cleaned.startswith('+7'):
        cleaned = '+' + cleaned
    # If starts with 9 and is 10 digits, add +7
    elif cleaned.startswith('9') and len(cleaned) == 10:
        cleaned = '+7' + cleaned
    
    return cleaned

def format_search_query(query: str) -> str:
    """Format search query according to usersbox API requirements"""
    query = query.strip()
    
    # Check if it looks like a phone number
    import re
    phone_pattern = r'[\+]?[0-9\s\-\(\)]{10,15}'
    if re.match(phone_pattern, query):
        return normalize_phone_number(query)
    
    # For other queries, just clean up extra spaces
    return ' '.join(query.split())

# User Profile Management
async def get_or_create_user_profile(user_id: int, username: str = None, first_name: str = None):
    """Get existing user profile or create new one"""
    try:
        # Try to find existing user
        user = await db.users.find_one({"user_id": user_id})
        
        if user:
            # Update last activity
            await db.users.update_one(
                {"user_id": user_id},
                {
                    "$set": {
                        "last_activity": datetime.utcnow(),
                        "username": username,
                        "first_name": first_name
                    }
                }
            )
            return user
        else:
            # Create new user profile
            referral_code = generate_referral_code(user_id)
            new_user = {
                "user_id": user_id,
                "username": username,
                "first_name": first_name,
                "referral_code": referral_code,
                "free_attempts": 1,  # 1 free attempt for new users
                "total_searches": 0,
                "total_referrals": 0,
                "referred_by": None,
                "created_at": datetime.utcnow(),
                "last_activity": datetime.utcnow(),
                "is_active": True
            }
            
            await db.users.insert_one(new_user)
            print(f"Created new user profile for {user_id} with referral code {referral_code}")
            return new_user
            
    except Exception as e:
        print(f"Error managing user profile: {e}")
        return None

async def use_attempt(user_id: int) -> bool:
    """Use one attempt for user, return True if successful"""
    try:
        user = await db.users.find_one({"user_id": user_id})
        if not user:
            return False
            
        if user.get("free_attempts", 0) > 0:
            # Use free attempt
            await db.users.update_one(
                {"user_id": user_id},
                {"$inc": {"free_attempts": -1, "total_searches": 1}}
            )
            return True
        else:
            return False  # No attempts left
            
    except Exception as e:
        print(f"Error using attempt: {e}")
        return False

async def add_referral_attempt(user_id: int):
    """Add attempt for successful referral"""
    try:
        await db.users.update_one(
            {"user_id": user_id},
            {"$inc": {"free_attempts": 1, "total_referrals": 1}}
        )
        print(f"Added referral attempt for user {user_id}")
    except Exception as e:
        print(f"Error adding referral attempt: {e}")

async def process_referral(new_user_id: int, referral_code: str):
    """Process referral when new user joins"""
    try:
        # Find referrer by code
        referrer = await db.users.find_one({"referral_code": referral_code})
        if not referrer:
            return False
            
        referrer_id = referrer["user_id"]
        
        # Update new user with referrer info
        await db.users.update_one(
            {"user_id": new_user_id},
            {"$set": {"referred_by": referrer_id}}
        )
        
        # Add attempt to referrer
        await add_referral_attempt(referrer_id)
        
        # Log referral
        await db.referrals.insert_one({
            "referrer_id": referrer_id,
            "referred_id": new_user_id,
            "referral_code": referral_code,
            "timestamp": datetime.utcnow()
        })
        
        return True
        
    except Exception as e:
        print(f"Error processing referral: {e}")
        return False

# Telegram Bot Functions
async def send_telegram_message(chat_id: int, text: str, parse_mode: str = "Markdown"):
    """Send message to Telegram chat"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": parse_mode
        }
        
        response = await http_client.post(url, json=payload)
        response.raise_for_status()
        
        # Log message to database
        await db.messages.insert_one({
            "id": str(uuid.uuid4()),
            "chat_id": chat_id,
            "text": text,
            "direction": "outgoing",
            "timestamp": datetime.utcnow(),
            "status": "sent"
        })
        
        return response.json()
    except Exception as e:
        print(f"Error sending Telegram message: {e}")
        raise

# Usersbox API Functions
async def usersbox_request(endpoint: str, params: dict = None):
    """Make request to usersbox API"""
    try:
        base_url = "https://api.usersbox.ru/v1"
        url = f"{base_url}/{endpoint}"
        
        headers = {
            "Authorization": USERSBOX_TOKEN
        }
        
        print(f"Making usersbox request: {url}")
        print(f"Params: {params}")
        
        response = await http_client.get(url, headers=headers, params=params)
        
        print(f"Response status: {response.status_code}")
        
        if response.status_code != 200:
            response_text = await response.aread()
            print(f"Error response: {response_text.decode()}")
        
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"Error making usersbox request to {url}: {e}")
        if hasattr(e, 'response') and e.response:
            print(f"Response status: {e.response.status_code}")
        raise

async def get_app_info():
    """Get usersbox app information"""
    return await usersbox_request("getMe")

async def get_sources():
    """Get available data sources"""
    return await usersbox_request("sources")

async def search_all_databases(query: str):
    """Search across all databases"""
    return await usersbox_request("search", {"q": query})

async def explain_search(query: str):
    """Get count of search results without actual data"""
    return await usersbox_request("explain", {"q": query})

# Bot Command Handlers
async def handle_start_command(chat_id: int, username: str = None, first_name: str = None):
    """Handle /start command"""
    try:
        # Create or get user profile
        user = await get_or_create_user_profile(chat_id, username, first_name)
        
        if not user:
            await send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        attempts = user.get("free_attempts", 0)
        is_new_user = user.get("created_at", datetime.utcnow()).replace(tzinfo=None) > (datetime.utcnow() - datetime.timedelta(minutes=5)).replace(tzinfo=None)
        
        if is_new_user:
            welcome_text = f"""
üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö!*

–í—ã –ø–æ–ª—É—á–∏–ª–∏ *1 –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–ø—ã—Ç–∫—É* –¥–ª—è –ø–æ–∏—Å–∫–∞!

üîç *–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ 20+ –º–∏–ª–ª–∏–∞—Ä–¥–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º, email, –∏–º–µ–Ω–∞–º, IP
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –∏ —Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

üíé *–û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ø—ã—Ç–∫–∏: {attempts}*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
üì± `/search <–∑–∞–ø—Ä–æ—Å>` - –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –±–∞–∑–∞–º
üë§ `/profile` - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üéÅ `/referral` - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏
üí∞ `/balance` - –±–∞–ª–∞–Ω—Å API
‚ùì `/help` - –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å

*–ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞:*
‚Ä¢ `+79123456789` - –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
‚Ä¢ `example@mail.ru` - –ø–æ–∏—Å–∫ –ø–æ email
‚Ä¢ `–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤` - –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏

üéÅ *–ü–æ–ª—É—á–∏—Ç–µ –±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫:*
–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∫–æ–º–∞–Ω–¥–æ–π `/referral` - –∑–∞ –∫–∞–∂–¥–æ–≥–æ +1 –ø–æ–ø—ã—Ç–∫–∞!
            """
        else:
            welcome_text = f"""
üëã *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!*

üíé *–û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ø—ã—Ç–∫–∏: {attempts}*

*–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
üîç –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
üë§ `/profile` - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å
üéÅ `/referral` - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π (+1 –ø–æ–ø—ã—Ç–∫–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ)

–ù—É–∂–Ω—ã –µ—â–µ –ø–æ–ø—ã—Ç–∫–∏? –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π! üöÄ
            """
        
        await send_telegram_message(chat_id, welcome_text)
        
    except Exception as e:
        print(f"Error in start command: {e}")
        await send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_profile_command(chat_id: int):
    """Handle /profile command"""
    try:
        user = await db.users.find_one({"user_id": chat_id})
        if not user:
            await send_telegram_message(chat_id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
            return
        
        # Get referral stats
        referrals_count = await db.referrals.count_documents({"referrer_id": chat_id})
        
        profile_text = f"""
üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*

üÜî ID: `{user['user_id']}`
üëë –ò–º—è: {user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìù Username: @{user.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}

üíé *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –ü–æ–ø—ã—Ç–∫–∏: *{user.get('free_attempts', 0)}*
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: *{user.get('total_searches', 0)}*
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: *{referrals_count}*

üéØ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:* `{user.get('referral_code', 'N/A')}`

üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('created_at', datetime.utcnow()).strftime('%d.%m.%Y')}
‚è±Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.get('last_activity', datetime.utcnow()).strftime('%d.%m.%Y %H:%M')}

üéÅ *–ü–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫:*
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/referral` —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π!
–ó–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ +1 –ø–æ–ø—ã—Ç–∫—É.
        """
        
        await send_telegram_message(chat_id, profile_text)
        
    except Exception as e:
        print(f"Error in profile command: {e}")
        await send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")

async def handle_referral_command(chat_id: int):
    """Handle /referral command"""
    try:
        user = await db.users.find_one({"user_id": chat_id})
        if not user:
            await send_telegram_message(chat_id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
            return
        
        referral_code = user.get('referral_code')
        bot_username = "YourBotUsername"  # Replace with actual bot username
        
        # Get referral stats
        total_referrals = await db.referrals.count_documents({"referrer_id": chat_id})
        
        referral_text = f"""
üéÅ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*

*–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:* `{referral_code}`

üîó *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*
`https://t.me/{bot_username}?start={referral_code}`

üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: *{total_referrals}*
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: *{total_referrals}*

üéØ *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
1. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏
2. –û–Ω–∏ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞–ø—É—Å–∫–∞—é—Ç –±–æ—Ç–∞
3. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +1 –ø–æ–ø—ã—Ç–∫—É –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
4. –û–Ω–∏ –ø–æ–ª—É—á–∞—é—Ç —Å–≤–æ—é 1 –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–ø—ã—Ç–∫—É

üí° *–°–æ–≤–µ—Ç:* –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º –≤ –ª—é–±–æ–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ!

üöÄ –ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π - —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞!
        """
        
        await send_telegram_message(chat_id, referral_text)
        
    except Exception as e:
        print(f"Error in referral command: {e}")
        await send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

async def handle_invite_command(chat_id: int, referral_code: str):
    """Handle /invite command"""
    try:
        if not referral_code:
            await send_telegram_message(chat_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: `/invite –ö–û–î`")
            return
        
        # Check if user already exists and has referrer
        user = await db.users.find_one({"user_id": chat_id})
        if user and user.get("referred_by"):
            await send_telegram_message(chat_id, "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —Ä–∞–Ω–µ–µ.")
            return
        
        # Process referral
        success = await process_referral(chat_id, referral_code.upper())
        
        if success:
            await send_telegram_message(chat_id, f"""
‚úÖ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–Ω—è—Ç!*

üéâ –í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ –±–æ—Ç–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö!
üéÅ –í–∞—à –ø—Ä–∏–≥–ª–∞—à–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª +1 –ø–æ–ø—ã—Ç–∫—É

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/start` –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!
            """)
        else:
            await send_telegram_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        
    except Exception as e:
        print(f"Error in invite command: {e}")
        await send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞.")

async def handle_search_command(chat_id: int, query: str, username: str = None, first_name: str = None):
    """Handle search command"""
    if not query.strip():
        await send_telegram_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return
    
    try:
        # Get or create user profile
        user = await get_or_create_user_profile(chat_id, username, first_name)
        if not user:
            await send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
            return
        
        # Check if user has attempts
        attempts = user.get("free_attempts", 0)
        if attempts <= 0:
            await send_telegram_message(chat_id, f"""
‚ùå *–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏!*

üíé –¢–µ–∫—É—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏: *0*

üéÅ *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫:*
‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π —á–µ—Ä–µ–∑ `/referral` (+1 –∑–∞ –∫–∞–∂–¥–æ–≥–æ)
‚Ä¢ –ö—É–ø–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ (—Å–∫–æ—Ä–æ)

üöÄ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏!
            """)
            return
        
        # Use attempt
        if not await use_attempt(chat_id):
            await send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # Format the query properly
        formatted_query = format_search_query(query)
        
        # Show processing message with remaining attempts
        remaining_attempts = attempts - 1
        await send_telegram_message(chat_id, f"""
üîç *–ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω!*

–ó–∞–ø—Ä–æ—Å: `{formatted_query}`
üíé –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*

‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...
        """)
        
        # First, get count of results
        explain_result = await explain_search(formatted_query)
        total_count = explain_result.get("data", {}).get("count", 0)
        
        if total_count == 0:
            await send_telegram_message(chat_id, f"""
‚ùå *–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*

–ó–∞–ø—Ä–æ—Å: `{formatted_query}`
üíé –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*

üí° *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç:*
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: `+79123456789`
‚Ä¢ Email: `user@domain.com`
‚Ä¢ –ò–º—è: `–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤`
            """)
            return
        
        # Get actual search results
        search_result = await search_all_databases(formatted_query)
        
        if search_result.get("status") == "success":
            data = search_result.get("data", {})
            results_count = data.get("count", 0)
            items = data.get("items", [])
            
            if results_count == 0:
                await send_telegram_message(chat_id, f"""
‚ùå *–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*

–ó–∞–ø—Ä–æ—Å: `{formatted_query}`
üíé –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*
                """)
                return
            
            # Format results
            response_text = f"üéØ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞*\n\n"
            response_text += f"üìä –ù–∞–π–¥–µ–Ω–æ –≤ *{total_count}* –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö\n"
            response_text += f"üíé –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{remaining_attempts}*\n\n"
            
            for i, source_item in enumerate(items[:3]):  # Show first 3 sources
                source = source_item.get("source", {})
                hits = source_item.get("hits", {})
                
                db_name = source.get("database", "Unknown")
                collection_name = source.get("collection", "Unknown")
                hits_count = hits.get("hitsCount", 0)
                
                response_text += f"üìÅ *–ë–∞–∑–∞: {db_name}/{collection_name}*\n"
                response_text += f"üìä –ù–∞–π–¥–µ–Ω–æ: {hits_count} –∑–∞–ø–∏—Å–µ–π\n"
                
                # Show first few records
                hit_items = hits.get("items", [])
                for j, record in enumerate(hit_items[:2]):  # Show first 2 records per source
                    response_text += f"\nüî∏ *–ó–∞–ø–∏—Å—å {j+1}:*\n"
                    
                    # Format record fields
                    for key, value in record.items():
                        if key.startswith("_"):
                            continue
                        if isinstance(value, dict):
                            continue
                        if len(str(value)) > 50:
                            value = str(value)[:50] + "..."
                        response_text += f"‚Ä¢ {key}: `{value}`\n"
                
                response_text += "\n" + "‚îÄ" * 30 + "\n\n"
            
            if len(items) > 3:
                response_text += f"... –∏ –µ—â–µ {len(items) - 3} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n\n"
            
            response_text += f"üéÅ *–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫?*\n"
            response_text += f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/referral` –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π!"
            
            # Split message if too long
            if len(response_text) > 4000:
                parts = response_text.split("‚îÄ" * 30)
                for part in parts[:3]:  # Send first 3 parts
                    if part.strip():
                        await send_telegram_message(chat_id, part.strip())
            else:
                await send_telegram_message(chat_id, response_text)
        
        # Log search to database
        await db.searches.insert_one({
            "id": str(uuid.uuid4()),
            "chat_id": chat_id,
            "query": formatted_query,
            "original_query": query,
            "results_count": total_count,
            "attempts_used": 1,
            "remaining_attempts": remaining_attempts,
            "timestamp": datetime.utcnow()
        })
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}"
        
        # Add more detailed error information
        if "400" in str(e):
            error_msg += f"\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:\n"
            error_msg += f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: `+79123456789` (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)\n"
            error_msg += f"‚Ä¢ Email: `user@domain.com`\n"
            error_msg += f"‚Ä¢ –ò–º—è: `–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤`"
        elif "401" in str(e) or "403" in str(e):
            error_msg += f"\n\nüîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π API"
        elif "429" in str(e):
            error_msg += f"\n\n‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        elif "500" in str(e):
            error_msg += f"\n\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        await send_telegram_message(chat_id, error_msg)
        print(f"Search error for query '{query}' -> '{formatted_query}': {e}")

async def handle_sources_command(chat_id: int):
    """Handle /sources command"""
    try:
        sources = await get_sources()
        
        if sources.get("status") == "success":
            data = sources.get("data", {})
            total_count = data.get("count", 0)
            items = data.get("items", [])
            
            response_text = f"üìä *–î–æ—Å—Ç—É–ø–Ω–æ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: {total_count}*\n\n"
            response_text += "*–¢–æ–ø-10 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –±–∞–∑:*\n\n"
            
            # Sort by count and show top 10
            sorted_items = sorted(items, key=lambda x: x.get("count", 0), reverse=True)
            
            for i, item in enumerate(sorted_items[:10]):
                title = item.get("title", "Unknown")
                count = item.get("count", 0)
                database = item.get("database", "")
                collection = item.get("collection", "")
                
                response_text += f"{i+1}. *{title}*\n"
                response_text += f"   üìÅ `{database}/{collection}`\n"
                response_text += f"   üìä –ó–∞–ø–∏—Å–µ–π: {count:,}\n\n"
            
            response_text += f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º –±–∞–∑–∞–º"
            
            await send_telegram_message(chat_id, response_text)
        else:
            await send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {str(e)}"
        await send_telegram_message(chat_id, error_msg)

async def handle_balance_command(chat_id: int):
    """Handle /balance command"""
    try:
        app_info = await get_app_info()
        
        if app_info.get("status") == "success":
            data = app_info.get("data", {})
            balance = data.get("balance", 0)
            title = data.get("title", "Unknown")
            is_active = data.get("is_active", False)
            
            status_emoji = "‚úÖ" if is_active else "‚ùå"
            
            response_text = f"""
üí∞ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ API*

üè∑Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: `{title}`
{status_emoji} –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–æ' if is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}
üí≥ –ë–∞–ª–∞–Ω—Å: *{balance} ‚ÇΩ*

üìä *–¢–∞—Ä–∏—Ñ—ã:*
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ: 0.005 ‚ÇΩ –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –±–∞–∑–∞–º: 2.5 ‚ÇΩ
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ

üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /api –≤ @usersbox_bot

üéÅ *–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏:*
–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π —á–µ—Ä–µ–∑ `/referral` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫!
            """
            
            await send_telegram_message(chat_id, response_text)
        else:
            await send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}"
        await send_telegram_message(chat_id, error_msg)

async def handle_help_command(chat_id: int):
    """Handle /help command"""
    help_text = """
‚ùì *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*

*ü§ñ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ `/start` - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
‚Ä¢ `/profile` - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ `/referral` - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
‚Ä¢ `/search <–∑–∞–ø—Ä–æ—Å>` - –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –±–∞–∑–∞–º
‚Ä¢ `/sources` - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ `/balance` - –±–∞–ª–∞–Ω—Å API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*üîç –§–æ—Ä–º–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: `+79123456789` –∏–ª–∏ `79123456789`
‚Ä¢ Email: `example@mail.ru`
‚Ä¢ –ò–º—è: `–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤`
‚Ä¢ IP-–∞–¥—Ä–µ—Å: `192.168.1.1`
‚Ä¢ –õ—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞

*üéÅ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ø—ã—Ç–æ–∫:*
‚Ä¢ 1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ +1 –ø–æ–ø—ã—Ç–∫–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/referral` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏

*üí° –°–æ–≤–µ—Ç—ã:*
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
‚Ä¢ –ë–æ—Ç –∏—â–µ—Ç –ø–æ 20+ –º–∏–ª–ª–∏–∞—Ä–¥–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

*‚ö†Ô∏è –í–∞–∂–Ω–æ:*
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ –∑–∞–∫–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö!
    """
    await send_telegram_message(chat_id, help_text)

# Webhook handler
@app.post("/api/webhook")
async def telegram_webhook(request: Request):
    """Handle incoming Telegram updates"""
    try:
        update_data = await request.json()
        print(f"Received update: {update_data}")
        
        message = update_data.get("message")
        if not message:
            return {"status": "ok"}
        
        chat_id = message.get("chat", {}).get("id")
        text = message.get("text", "")
        user_info = message.get("from", {})
        username = user_info.get("username")
        first_name = user_info.get("first_name")
        
        if not chat_id or not text:
            return {"status": "ok"}
        
        # Log incoming message
        await db.messages.insert_one({
            "id": str(uuid.uuid4()),
            "chat_id": chat_id,
            "text": text,
            "direction": "incoming",
            "timestamp": datetime.utcnow(),
            "user_info": user_info,
            "update_data": update_data
        })
        
        # Handle commands and referral codes in /start
        if text.startswith("/start"):
            parts = text.split()
            if len(parts) > 1:
                # Handle referral code in /start command
                referral_code = parts[1]
                await handle_invite_command(chat_id, referral_code)
            await handle_start_command(chat_id, username, first_name)
        elif text.startswith("/profile"):
            await handle_profile_command(chat_id)
        elif text.startswith("/referral"):
            await handle_referral_command(chat_id)
        elif text.startswith("/invite"):
            parts = text.split()
            referral_code = parts[1] if len(parts) > 1 else ""
            await handle_invite_command(chat_id, referral_code)
        elif text.startswith("/search"):
            query = text[7:].strip()  # Remove "/search" prefix
            await handle_search_command(chat_id, query, username, first_name)
        elif text.startswith("/sources"):
            await handle_sources_command(chat_id)
        elif text.startswith("/balance"):
            await handle_balance_command(chat_id)
        elif text.startswith("/help"):
            await handle_help_command(chat_id)
        else:
            # Treat any other text as search query
            await handle_search_command(chat_id, text, username, first_name)
        
        return {"status": "ok"}
        
    except Exception as e:
        print(f"Webhook error: {e}")
        return {"status": "error", "message": str(e)}

# API endpoints for frontend
@app.get("/api/")
async def root():
    return {"message": "Telegram Bot API Server with Referral System", "status": "running"}

@app.get("/api/stats")
async def get_stats():
    """Get bot usage statistics"""
    try:
        total_messages = await db.messages.count_documents({})
        total_searches = await db.searches.count_documents({})
        total_users = await db.users.count_documents({})
        total_referrals = await db.referrals.count_documents({})
        
        # Get recent activity
        recent_messages = await db.messages.find(
            {}, 
            {"_id": 0}
        ).sort("timestamp", -1).limit(10).to_list(10)
        
        recent_searches = await db.searches.find(
            {}, 
            {"_id": 0}
        ).sort("timestamp", -1).limit(10).to_list(10)
        
        # Get top users by searches
        pipeline = [
            {"$group": {"_id": "$chat_id", "count": {"$sum": 1}}},
            {"$sort": {"count": -1}},
            {"$limit": 5}
        ]
        top_users = await db.searches.aggregate(pipeline).to_list(5)
        
        return {
            "total_messages": total_messages,
            "total_searches": total_searches,
            "total_users": total_users,
            "total_referrals": total_referrals,
            "recent_messages": recent_messages,
            "recent_searches": recent_searches,
            "top_users": top_users
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/users")
async def get_users():
    """Get user statistics"""
    try:
        users = await db.users.find({}, {"_id": 0}).sort("created_at", -1).limit(20).to_list(20)
        return {"users": users}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/referrals")
async def get_referrals():
    """Get referral statistics"""
    try:
        referrals = await db.referrals.find({}, {"_id": 0}).sort("timestamp", -1).limit(20).to_list(20)
        return {"referrals": referrals}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/test-usersbox")
async def test_usersbox():
    """Test usersbox API connection"""
    try:
        result = await get_app_info()
        return {"status": "success", "data": result}
    except Exception as e:
        return {"status": "error", "message": str(e)}

@app.post("/api/set-webhook")
async def set_webhook():
    """Set Telegram webhook URL"""
    try:
        webhook_url = "https://3312ad11-8248-4d7e-86f5-1571a6d10e5d.preview.emergentagent.com/api/webhook"
        
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook"
        payload = {
            "url": webhook_url
        }
        
        response = await http_client.post(url, json=payload)
        response.raise_for_status()
        
        result = response.json()
        return {"status": "success", "webhook_url": webhook_url, "telegram_response": result}
        
    except Exception as e:
        return {"status": "error", "message": str(e)}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)